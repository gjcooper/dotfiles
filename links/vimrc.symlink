"remove vi compatibility
set nocompatible " Not needed when vimrc exists

call plug#begin('~/.vim/plugged')
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let vim-plug manage vim-plug, required for help
Plug 'junegunn/vim-plug'

" The following are examples of different formats supported.
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'

Plug 'fs111/pydoc.vim'

Plug 'gjcooper/vim-nbs-pres'

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Plug 'altercation/vim-colors-solarized'
" Plug 'morhetz/gruvbox'
Plug 'NLKNguyen/papercolor-theme'
Plug 'will133/vim-dirdiff'

Plug 'raimon49/requirements.txt.vim'
Plug 'Glench/Vim-Jinja2-Syntax'

" Plug 'thanthese/Tortoise-Typing'

Plug 'ctrlpvim/ctrlp.vim'
Plug 'heavenshell/vim-pydocstring'

Plug 'gjcooper/JA_Vimfiles'  " Inquisit syntax colouring and folding
Plug 'gjcooper/mysnippets'  " My vim snippets

" Plug 'maverickg/stan.vim'

Plug 'rickhowe/diffchar.vim' " Character level diff views
Plug 'AndrewRadev/linediff.vim' " Block level diff

Plug 'jalvesaq/Nvim-R', {'branch': 'oldstable'} " R code support within vim

Plug 'gjcooper/vim-local'

Plug 'vim-latex/vim-latex'

" Plug 'tpope/vim-fugitive'

Plug 'pangloss/vim-javascript'

Plug 'w0rp/ale'

Plug 'vimwiki/vimwiki'

Plug 'chrisbra/unicode.vim'

Plug 'heavenshell/vim-jsdoc'

Plug 'godlygeek/tabular'

Plug 'plasticboy/vim-markdown'
Plug 'vim-pandoc/vim-pandoc-syntax'

Plug 'Rykka/riv.vim'

Plug 'fatih/vim-go'

Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }


call plug#end()            " required
" Modelines=0 means vim does not check files it is opening for commands to
" follow
set modelines=0


" set encoding=utf-8 " Shouldn't be necessary as terminal set to utf-8
set showmode
"Allow a modified buffer to be placed in the background
set hidden
"When matching list all matches and complete till longest matching string
set wildmode=list:longest
"Show visual warning rather than beeping
set visualbell
"Highlight current line
set cursorline
" set ttyfast "Should be set by default in most terminals
"Show line numbers as relative to current line
set relativenumber

"Change mapleader from default \ to ,
"localleader is still the default \
let mapleader = ","

"Use normal regex characters in normal and visual/select mode search
nnoremap / /\v
vnoremap / /\v
"Deal with case sensitive search intelligently, ignore case when searching
"with lower case chars only
set ignorecase
set smartcase
"global search and replace is default
set gdefault
" When you insert a bracket briefly switch to matching bracket if on the page
set showmatch
"Highlight search results as you type
set hlsearch
"Fix pasting via right-click and autoindenting
set pastetoggle=<F2>
"Set tabstop and shiftwidth to be 4 and set expandtab by default for all files
set ts=4 sw=4 expandtab
"Set listchars for :set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·,eol:↲
if has("patch-7.4.710")
  set listchars+=space:_
endif
"clear out search by typing ,<space>
nnoremap <leader><space> :noh<cr>
"Run current buffer with python
autocmd FileType python nnoremap <silent> <leader>r :!clear;python %<CR> 
"Python we definitely want to expandtab (and enaml - Python superset)
"We also want to set foldmethod as indent for python/enaml
"We also want to set foldnestmax for python/enaml
" Create visual column for "screen width"
autocmd FileType python\|enaml set sts=4 ts=4 sw=4 cc=80 fdm=indent foldnestmax=3
let g:ultisnips_python_quoting_style="single"
let g:ultisnips_python_style="numpy"

" Narrower tabwidth for html/css
autocmd FileType html\|css\|javascript\|json set sts=2 ts=2 sw=2 cc=80 foldmethod=syntax
"Auto word wrap for tex files
autocmd FileType tex set linebreak wrap cc=80 breakindent
"For use with nvim-r and R so that R starts in tmux pane
let R_tmux_title = 'automatic'
let R_assign= 2
let R_pdfviewer = 'xpdf'
"For use with nvim-r so that commented lines get sent to R console
let R_commented_lines = 1
"Fold method and file settings for R
autocmd FileType r set fdm=syntax sts=2 ts=2 sw=2 cc=80 
autocmd FileType r inoremap <buffer> >> <Esc>:normal! a %>%<CR>a
let r_syntax_folding = 1
"tab key matches bracket pairs
nnoremap <tab> %
vnoremap <tab> %
"Fold method and file settings for Rmd
autocmd FileType rmd set sts=2 ts=2 sw=2 cc=80
autocmd FileType rmd inoremap <buffer> >> <Esc>:normal! a %>%<CR>a
autocmd FileType vimwiki set sts=2 ts=2 sw=2 cc=80
"Fold method and file settings for RST
autocmd FileType rst set sts=3 ts=3 sw=3 cc=80

"Search for current word under cursor with F4
map <F4> :execute " grep -srnw --binary-files=without-match --exclude=.swp --exclude-dir=.git . -e " . expand("<cword>") . " " <bar> cwindow<CR>

nmap <F5> <Plug>ToggleDiffCharAllLines
nmap <F6> <Plug>ToggleDiffCharCurrentLine

" Load the PaperColor colour scheme
" set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
" set t_Co=256   " This is may or may not needed.
set background=dark
colorscheme PaperColor


function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

let g:tex_comment_nospell=1
let g:tex_flavor = "latex"
let g:Tex_AdvancedMath = 1
" Should only do this in latex files
autocmd FileType tex imap <buffer> <leader>i <Plug>Tex_InsertItemOnThisLine
" Enable python code highliting for enaml files
"au BufNewFile,BufRead *.enaml set filetype=enaml
"
" Ale specific settings
map <leader>k <Plug>(ale_previous_wrap)
map <leader>j <Plug>(ale_next_wrap)
map <leader>a <Plug>(ale_toggle)

" Toggle diffmode on windows
map <leader>d :call DiffModeToggle()<cr>

" Set go template engine in html
map <leader>h :set filetype=gohtmltmpl<cr>

" Insert current date and time for hugo page header
map <leader>t :put =strftime('date: %Y-%m-%dT%T%z')<cr>

function! DiffModeToggle()
	if &diff
		windo diffoff
	else
		windo diffthis
	endif
endfunction

let g:ale_linters = {'javascript': ['eslint'], 'css': ['eslint'], 'r': ['lintr'], 'xml': ['xmllint']}
let g:ale_fixers = {'javascript': ['prettier'], 'css': ['prettier'], 'html': ['prettier'], 'r': ['styler']}

" Vimwiki settings
let g:vimwiki_list = [{
  \ 'path': '$HOME/vimwiki',
  \ 'auto_toc': 1,
  \ 'template_path': '$HOME/vimwiki/templates',
  \ 'template_default': 'default',
  \ 'template_ext': '.html'}]
let g:vimwiki_folding='expr'
let g:vimwiki_hl_headers = 1
let g:vimwiki_global_ext = 0

" ctags for R
let g:tagbar_type_r = {
    \ 'ctagstype' : 'r',
    \ 'kinds'     : [
        \ 'f:Functions',
        \ 'g:GlobalVariables',
        \ 'v:FunctionVariables',
    \ ]
    \ }

" pydocstring settings
let g:pydocstring_doq_path = '/home/gjc216/.local/bin/doq'
let g:pydocstring_formatter = 'numpy'

let g:vim_markdown_folding_disabled = 1

" Ultisnips settings
autocmd FileType javascript UltiSnipsAddFiletypes javascript-jsdoc

